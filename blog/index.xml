<rss version="2.0">
  <channel>
    <title>The Full Stack Data Dev</title>
    <link>https://www.fullstackdata.dev</link>
    <description>The Full Stack Data Dev - Blog</description>
    <generator>Zine -- https://zine-ssg.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 24 Oct 2025 05:02:43 +0000</lastBuildDate>
    
      <item>
        <title>Powerful dbt tests using BigQuery Pipe Syntax</title>
        <description>&lt;p&gt;Work in progress.&lt;/p&gt;</description>
        <link>https://www.fullstackdata.dev/blog/3-BQPipe-dbt-testing/</link>
        <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/3-BQPipe-dbt-testing/</guid>
      </item>
    
      <item>
        <title>Data quality testing in dbt</title>
        <description>&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;This blog is aimed at sharing some novel approaches to data quality testing. We’ll be using dbt as our tool throughout the article, but the ideas should be equally usable on tools like SQLMesh or on your favourite RDBMS.&lt;/p&gt;&lt;p&gt;So what is data quality, and how would a company know whether they have achieved good data quality? For many companies that have some form of basic data quality control, data quality often applies at the data ingestion stage, checking for missing fields, valid timestamps, duplicate records, etc. For those with more investment, they will perhaps check that the data has the expected schema at various stages of the data pipeline. They may even employ testing frameworks like &lt;a href=&quot;https://hub.getdbt.com/metaplane/dbt_expectations/latest/&quot; target=&quot;_blank&quot;&gt;dbt_expectations&lt;/a&gt; to assert stronger properties on the contents of the table. However, most of these data quality checks are targeted towards the technical teams (e.g. engineering &amp; data analytics teams). What they don’t do is inform the business how much impact the data issue has on their decision making.&lt;/p&gt;&lt;p&gt;In my opinion, here are a few qualitative signs of a company good data quality:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The business stakeholders (e.g. product managers, leadership) actually make informed decisions based on the data presented to them. This is assuming they claim to be data-driven.&lt;/li&gt;&lt;li&gt;The business stakeholders don’t frequently bother the data &amp; analytics team with questions like “can we trust this number?” They are proactively notified of known data issues and know how their decision making might be impacted.&lt;/li&gt;&lt;li&gt;The business stakeholders don’t complain about different dashboards showing different numbers for the same metric.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;So what more can the data &amp; analytics teams do to help the business get to this stage? We need even more expressive data tests that reflect what the business stakeholders expect from their data.&lt;/p&gt;&lt;h1&gt;Consistency&lt;/h1&gt;&lt;p&gt;“Consistency” here means that a metric computed in one table/dashboard will be the same if computed in another, within some accepted tolerance. For example, the BI dashboard used by a product manager might have the YTD earnings of their product, and they expect the C-suite’s dashboard to show the same number (or within 1% difference).&lt;/p&gt;&lt;p&gt;Let’s consider a more concrete (albeit contrived) example based on the following table &lt;code&gt;customer_data&lt;/code&gt;. This table might be a cleaned fact table that other business functions are expected to use (as opposed to reading directly from a raw data stream).&lt;/p&gt;&lt;p&gt;&lt;strong&gt;customer_data&lt;/strong&gt;&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;customer_id&lt;/th&gt;&lt;th&gt;user_country&lt;/th&gt;&lt;th&gt;acquisition_channel&lt;/th&gt;&lt;th&gt;lifetime_value_usd&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;US&lt;/td&gt;&lt;td&gt;GoogleAds&lt;/td&gt;&lt;td&gt;5.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;CA&lt;/td&gt;&lt;td&gt;GoogleAds&lt;/td&gt;&lt;td&gt;3.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;US&lt;/td&gt;&lt;td&gt;MicrosoftAds&lt;/td&gt;&lt;td&gt;5.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;AU&lt;/td&gt;&lt;td&gt;Unknown&lt;/td&gt;&lt;td&gt;2.0&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The C-suite may have a table built to sum the total lifetime value of all customers, grouped by user_country and filtered by known ads networks:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt; TABLE `customer_value_csuite`
&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;user_country&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;lifetime_value_usd&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;revenue&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;`customer_data`&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;acquisition_channel&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;GoogleAds&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;&amp;quot;MicrosoftAds&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;user_country&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The product manager may have a similar table, but simply grouped by acquisition_channel:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt; TABLE `customer_value_pm`
&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;acquisition_channel&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;lifetime_value_usd&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;lifetime_value_usd&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;`customer_data`&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;acquisition_channel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check for data consistency against the C-suite table, the product manager might have their team write a query like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
tgt &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;lifetime_value_usd&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;`customer_value_pm`&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;acquisition_channel&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;IN&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;GoogleAds&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;&amp;quot;MicrosoftAds&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
ref &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;revneue&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;reference&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;`customer_value_csuite`&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
joined &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;string float number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;SAFE_DIVIDE&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;metric&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;error_pct&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;tgt&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;string boolean float number&quot;&gt;TRUE&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;joined&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;ABS&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;error_pct&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This query follows the convention of &lt;a href=&quot;https://docs.getdbt.com/docs/build/data-tests#overview&quot; target=&quot;_blank&quot;&gt;dbt tests&lt;/a&gt; where failing rows are returned, i.e. the test is deemed passing if the query returns no rows.&lt;/p&gt;&lt;h2&gt;Example failure modes&lt;/h2&gt;&lt;p&gt;WIP.&lt;/p&gt;&lt;h2&gt;Choice of testing nodes&lt;/h2&gt;&lt;p&gt;Instead of directly testing between the two &lt;code&gt;customer_value_*&lt;/code&gt; tables, we could instead test that each of them are consistent with the upstream table &lt;code&gt;customer_data&lt;/code&gt;. Pros:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;As more downstream tables are built off &lt;code&gt;customer_data&lt;/code&gt; with the consistency test, we can expect tha consistency quality to transfer to all of them. Cons:&lt;/li&gt;&lt;li&gt;In the case of a data issue that might cause one of the tests to break, it’s less obvious which two user-facing tables becomes inconsistent.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;When one downstream is no longer a strict subset of the other… Upstream consistency can still be tested.&lt;/p&gt;&lt;h2&gt;Generalisation in dbt&lt;/h2&gt;&lt;p&gt;This is what the test would looks like in dbt as a generic test. I’ve named it &lt;code&gt;metric_conserved&lt;/code&gt; in the spirit of conservation laws in physics.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;comment spell&quot;&gt;-- tests/generic/metric_conserved.sql&lt;/span&gt;
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; test metric_conserved&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  model&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  dims&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  _metric&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  ref_model&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  _reference&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  _residual&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;quot;_metric - _reference&amp;quot;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  fail_if&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;&amp;quot;_residual IS NULL OR _residual != 0&amp;quot;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}

{{ config&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;tags&lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt;[&amp;quot;test_metric_conserved&amp;quot;]&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; }}

{&lt;span class=&quot;operator&quot;&gt;#&lt;/span&gt; parse arguments &lt;span class=&quot;operator&quot;&gt;#&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;_reference&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; _metric if _reference &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;none&lt;/span&gt; &lt;span class=&quot;conditional&quot;&gt;else&lt;/span&gt; _reference &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}

{&lt;span class=&quot;operator&quot;&gt;#&lt;/span&gt; unzip dimension pairs &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; target&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;reference &lt;span class=&quot;operator&quot;&gt;#&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;t_dims&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;r_dims&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; [] &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; r &lt;span class=&quot;keyword_operator&quot;&gt;in&lt;/span&gt; dims &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;do&lt;/span&gt; t_dims&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;t&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;do&lt;/span&gt; r_dims&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;r&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; endfor &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}

&lt;span class=&quot;comment spell&quot;&gt;-- _dummy column is for when there are no explicit grouping dimensions&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
tgt &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    {{ &lt;span class=&quot;field&quot;&gt;_metric&lt;/span&gt; }} &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;_metric&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;_dummy&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    {{ &lt;span class=&quot;field&quot;&gt;t_dims&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; }}
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; {{ &lt;span class=&quot;type&quot;&gt;model&lt;/span&gt; }}
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    {{ &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;[&lt;span class=&quot;string float number&quot;&gt;&amp;quot;_dummy&amp;quot;&lt;/span&gt;] &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;t_dims&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; }}
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
ref &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    {{ &lt;span class=&quot;field&quot;&gt;_reference&lt;/span&gt; }} &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;_dummy&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    {{ &lt;span class=&quot;field&quot;&gt;r_dims&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; }}
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; {{ &lt;span class=&quot;type&quot;&gt;ref_model&lt;/span&gt; }}
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    {{ &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;[&lt;span class=&quot;string float number&quot;&gt;&amp;quot;_dummy&amp;quot;&lt;/span&gt;] &lt;span class=&quot;operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;r_dims&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; }}
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
joined &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;EXCEPT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;_dummy&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    r&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;_reference&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    {{ _residual }} &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; _residual&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; tgt &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; t
  &lt;span class=&quot;keyword&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;JOIN&lt;/span&gt; ref &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; r &lt;span class=&quot;keyword_operator&quot;&gt;ON&lt;/span&gt; t&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;_dummy &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; r&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;_dummy
  {&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; r &lt;span class=&quot;keyword_operator&quot;&gt;in&lt;/span&gt; dims &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
     &lt;span class=&quot;keyword_operator&quot;&gt;AND&lt;/span&gt; t &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; r
  {&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; endfor &lt;span class=&quot;operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;joined&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; {{ &lt;span class=&quot;field&quot;&gt;fail_if&lt;/span&gt; }}

{&lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;endtest&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;%&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example usage:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# models/customer_value_pm.yml&lt;/span&gt;
&lt;span class=&quot;string property&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;punctuation_delimiter&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;customer_value_pm&lt;/span&gt;

    &lt;span class=&quot;string property&quot;&gt;data_tests&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;punctuation_delimiter&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string property&quot;&gt;metric_conserved&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;customer_value_pm-conserves-revenue-customer_value_csuite&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;_metric&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;SUM(lifetime_value_usd)&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;ref_model&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ref(&amp;quot;customer_value_csuite&amp;quot;)&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;_reference&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;SUM(revenue)&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;_residual&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;SAFE_DIVIDE(_metric - _reference, _reference)&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;fail_if&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string punctuation_delimiter&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;string&quot;&gt; 
            _residual &amp;gt;= 0.1&lt;/span&gt;
          &lt;span class=&quot;string property&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;string property&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string punctuation_delimiter&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;
              acquisition_channel IN (&amp;quot;GoogleAds&amp;quot;, &amp;quot;MicrosoftAds&amp;quot;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The test definition sets &lt;code&gt;test_metric_conserved&lt;/code&gt; as a custom tag in the config for easy selection using dbt selectors.&lt;/li&gt;&lt;li&gt;dbt will generate a test name if there isn’t one, but I recommend having a naming standard.&lt;/li&gt;&lt;/ul&gt;</description>
        <link>https://www.fullstackdata.dev/blog/2-dbt-testing/</link>
        <pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/2-dbt-testing/</guid>
      </item>
    
      <item>
        <title>Google Pipe Syntax: Cleaner SQL</title>
        <description>&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;This blog is intended to highlight the benefits of Google’s Pipe syntax SQL and convince users for adoption. If you don’t use BigQuery (or another platform that supports it, like Apache Spark), then consider this blog as some mental exercise on why pipes (functional programming) is a great addition to SQL. So that the comparison with Standard SQL is mostly fair, I made a deliberate attempt to avoid contrived examples that overcomplicate standard SQL. In fact, most examples are based on production code written by past me and/or my colleagues.&lt;/p&gt;&lt;p&gt;If you’re not familiar with Pipe syntax, you may consider starting from a &lt;a href=&quot;#comparison&quot;&gt;later section&lt;/a&gt; to see some simple code side-by-side with Google standard SQL. Here are some more comprehensive resources if you find the examples here insufficient:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Official &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/standard-sql/pipe-syntax&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; for Pipe syntax.&lt;/li&gt;&lt;li&gt;Google’s &lt;a href=&quot;https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/&quot; target=&quot;_blank&quot;&gt;conference paper&lt;/a&gt; introducing Pipe syntax.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If I had to summarise the benefits of Pipe syntax SQL in a few bullet points, it would be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Improved guarantees on table cardinality.&lt;/li&gt;&lt;li&gt;Improved integration with dbt and templating, which I explore in &lt;a href=&quot;https://www.fullstackdata.dev/blog/2-dbt-testing/&quot;&gt;another article&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Improved readability from:&lt;ul&gt;&lt;li&gt;Fewer CTEs, each of which are more deliberately named.&lt;/li&gt;&lt;li&gt;Concise multi-level aggregation.&lt;/li&gt;&lt;li&gt;Concise sequential transforms.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Improved debugging experience in BigQuery console. I don’t discuss this in depth, but the tl;dr is that commenting out pipes is more convenient than commenting out CTEs.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Disclaimer&lt;/h2&gt;&lt;p&gt;There are some &lt;a href=&quot;https://cloud.google.com/bigquery/docs/pipe-syntax-guide#limitations&quot; target=&quot;_blank&quot;&gt;known limitations&lt;/a&gt; for Pipe Syntax at time of writing, the big one for me being:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;You can’t use a named window in pipe syntax.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Named windows are extremely convenient for analytics processing, and I often resort to using standard SQL in a new CTE specifically for window functions.&lt;/p&gt;&lt;p&gt;Finally, even if you’re convinced Pipe syntax is our lord and saviour, you don’t necessarily have to convince your company to rewrite the entire codebase in Pipe syntax. Adopting a new syntax/language is not a trivial decision for a team and requires upskilling for the team (though IMHO pipe syntax is easier to learn than standard SQL).&lt;/p&gt;&lt;h2&gt;Game-changer improvements&lt;/h2&gt;&lt;h3&gt;Easier to transform arrays of structs&lt;/h3&gt;&lt;p&gt;Consider a table with an array of structs as follows.&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Row&lt;/th&gt;&lt;th&gt;patient_id&lt;/th&gt;&lt;th&gt;history.weight&lt;/th&gt;&lt;th&gt;history.height&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;70&lt;/td&gt;&lt;td&gt;1.75&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;71&lt;/td&gt;&lt;td&gt;1.75&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;1.65&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt; &lt;/p&gt;&lt;details class=&quot;block&quot;&gt;&lt;summary&gt;SQL definition of table&lt;/summary&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;comment spell&quot;&gt;-- 1 row = 1 patient with an array of historical weight/height measurements&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; existing_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
   &lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;patient_id&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
   [
     &lt;span class=&quot;function_call type&quot;&gt;STRUCT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;1.75&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- weight:kg, height:m&lt;/span&gt;
     &lt;span class=&quot;function_call type&quot;&gt;STRUCT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;1.75&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
   ] &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;history&lt;/span&gt;
 &lt;span class=&quot;keyword_operator&quot;&gt;UNION&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;
 &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
   &lt;span class=&quot;string float number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;patient_id&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
   [
     &lt;span class=&quot;function_call type&quot;&gt;STRUCT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;1.65&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
   ] &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;history&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;existing_logic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;&lt;p&gt;Suppose we are now tasked to augment the history array by adding (BMI = weight / height^2) for each historical record. E.g. The target state is as follows.&lt;/p&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Row&lt;/th&gt;&lt;th&gt;patient_id&lt;/th&gt;&lt;th&gt;history.weight&lt;/th&gt;&lt;th&gt;history.height&lt;/th&gt;&lt;th&gt;history.bmi&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;70&lt;/td&gt;&lt;td&gt;1.75&lt;/td&gt;&lt;td&gt;22.86&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;71&lt;/td&gt;&lt;td&gt;1.75&lt;/td&gt;&lt;td&gt;23.18&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;1.65&lt;/td&gt;&lt;td&gt;23.51&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;There are many ways to achieve this in standard SQL, but we can broadly categorise them into 2 approaches:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Manipulate the arrays in place using a subquery.&lt;/li&gt;&lt;li&gt;Unnest the arrays in top-level CTEs, perform the transform, and re-aggregate.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Let’s look at some example implementations using standard SQL.&lt;/p&gt;&lt;h4&gt;Standard SQL (Approach 1)&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; existing_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Existing transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
bmi &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;function_call&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;                        &lt;span class=&quot;comment spell&quot;&gt;-- This is the start of the subquery&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;STRUCT&lt;/span&gt;
          &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;field&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;function_call type&quot;&gt;POWER&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;BMI&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;UNNEST&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;history&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;history&lt;/span&gt;                  &lt;span class=&quot;comment spell&quot;&gt;-- This is the end of the subquery&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
  FROM existing_logic
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
more_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Further transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Standard SQL (Approach 2)&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; existing_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Existing transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
bmi_unnest &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;existing_logic&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;h &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; history&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    OFFSET
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; existing_logic&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; UNNEST&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;history&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; h &lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
bmi_compute &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;STRUCT&lt;/span&gt;
        &lt;span class=&quot;type&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;type&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;weight&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;POWER&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;BMI&lt;/span&gt;
      &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; AS history
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bmi_unnest&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
bmi_reagg &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;EXCEPT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;OFFSET&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; history&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    ARRAY_AGG&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;history ORDER &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;OFFSET&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; history
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; bmi_compute
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
more_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Further transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despite the first approach appearing shorter, it is typically considered more difficult to read since the reader needs to identify the start and end of &lt;strong&gt;subqueries&lt;/strong&gt; among existing CTEs. This difficulty is greatly exacerbated by any logic that is more involved than a simple example computation and requires CTEs for sequential transformations.&lt;/p&gt;&lt;p&gt;The second approach is easier to read since all the CTEs are top-level and the reader doesn’t need to identify the start and end of nested subqueries. However, this improved readability comes at a cost:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Unnesting the array &amp; re-aggregating destroys guarantees on the &lt;strong&gt;table cardinality&lt;/strong&gt;. This makes the table more fragile to future code changes. Testing the table can help, but it’s difficult to provide any guarantees on table cardinality assuming it’s possible to test for this in the first place. The re-aggregation can be done either by a &lt;code&gt;SELECT * GROUP BY ALL&lt;/code&gt; for brevity (but difficult to debug), or by tediously listing all the grouping column.&lt;/li&gt;&lt;li&gt;We now have two extra CTEs that don’t really have any business logic, leading to &lt;strong&gt;namespace pollution&lt;/strong&gt; of CTEs.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Consider now the Pipe Syntax variant.&lt;/p&gt;&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt; existing_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Existing transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
bmi &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  FROM existing_logic
  |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt;
      history &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;function_call&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
          FROM UNNEST&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;history&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
          |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; EXTEND weight&lt;span class=&quot;operator&quot;&gt;/&lt;/span&gt;POWER&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;height&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; 2&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; BMI
          |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;STRUCT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt;
      &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
more_logic &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;comment spell&quot;&gt;-- Further transformations in model&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s see how it addresses some of the concerns from the standard SQL variants:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Subqueries&lt;/strong&gt;: Pipe syntax introduces one nested subquery per array. Furthermore, complex transformations can just be chained before the final &lt;code&gt;|&amp;gt; SELECT AS STRUCT *&lt;/code&gt; instead of using nested CTEs.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Table cardinality&lt;/strong&gt;: The cardinality of the top-level table is untouched. In fact, any changes in cardinality can be identified via the first word after the pipe, e.g. &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;AGGREGATE&lt;/code&gt;, &lt;code&gt;[LEFT|RIGHT|FULL] JOIN&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Namespace pollution&lt;/strong&gt;: A single CTE can be used to encapsulate as many or as few transformations as deemed appropriate.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;More powerful generic tests in dbt&lt;/h3&gt;&lt;p&gt;See this &lt;a href=&quot;https://www.fullstackdata.dev/blog/3-BQPipe-dbt-testing/&quot;&gt;later article&lt;/a&gt;.&lt;/p&gt;&lt;div id=&quot;comparison&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#comparison&quot;&gt;Small conveniences&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Easier to identify references to previous CTEs&lt;/h3&gt;&lt;p&gt;Consider the following example where &lt;code&gt;cte3&lt;/code&gt; references &lt;code&gt;cte1&lt;/code&gt;. In Standard SQL, the declaration &lt;code&gt;cte3 AS&lt;/code&gt; can be many lines apart from the reference &lt;code&gt;FROM cte1&lt;/code&gt; if the &lt;code&gt;SELECT&lt;/code&gt; list is long. In Pipe syntax, the reference to &lt;code&gt;cte1&lt;/code&gt; is always within a few lines of &lt;code&gt;cte3 AS&lt;/code&gt;.&lt;/p&gt;&lt;h4&gt;Standard SQL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
cte1 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;table&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

cte2 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;table2&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

cte3 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;cte1&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- this can be screens apart from `cte3 AS (`&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;cte3&lt;/span&gt;
&lt;span class=&quot;variable&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;cte2&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;USING&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
cte1 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
      &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;field&quot;&gt;cte2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;table2&lt;/span&gt;
  &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
      &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

&lt;span class=&quot;field&quot;&gt;cte3&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;cte1&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- this appears immediatley below `cte3 AS (`&lt;/span&gt;
  &lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
      &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;cte3&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;JOIN&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;cte2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; SELECT
    &lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Easier to identify changes in table cardinality (row-count)&lt;/h3&gt;&lt;p&gt;Consider the following example where the table undergoes several transformations, each of which affect the final row count. In Standard SQL, the cardinality of the table changes 4 times due to the clauses &lt;code&gt;UNNEST&lt;/code&gt;, &lt;code&gt;WHERE&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, and &lt;code&gt;HAVING&lt;/code&gt;.&lt;/p&gt;&lt;h4&gt;Standard SQL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;dim_1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;dim_2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;function_call type&quot;&gt;COUNTIF&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;some_criteria&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric_1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;function_call type&quot;&gt;ARRAY_AGG&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;some_expression&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric_2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;function_call type&quot;&gt;UNNEST&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function_call&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;a&lt;/span&gt;
WHERE some_filter
&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; dim_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;dim_2&lt;/span&gt;
&lt;span class=&quot;variable&quot;&gt;HAVING&lt;/span&gt; metric_1 &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; UNNEST&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; a
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; some_filter
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; AGGREGATE
    COUNTIF&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;some_criteria&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    ARRAY_AGG&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;some_expression&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    dim_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    dim_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; metric_1 &lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some pain points in Standard SQL and how Pipe syntax helps:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;If the &lt;code&gt;SELECT&lt;/code&gt; list is very long, the dev has to scroll down quite far from the beginning of the CTE to find out how the cardinality has changed. In Pipe syntax, the dev immediately expects a change in cardinality upon coming across one of &lt;code&gt;UNNEST&lt;/code&gt;, &lt;code&gt;|&amp;gt; WHERE&lt;/code&gt; and &lt;code&gt;|&amp;gt; AGGREGATE&lt;/code&gt;. Note, one may opt for the style of using &lt;code&gt;|&amp;gt; CROSS JOIN UNNEST&lt;/code&gt; to denote an explicit change in cardinality.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Additional mental headspace is needed to determine the order in which the table cardinality changes due to each of the 4 clauses. This is exacerbated further if the query has additional clauses like &lt;code&gt;QUALIFY&lt;/code&gt; and &lt;code&gt;PIVOT&lt;/code&gt;. In Pipe syntax, the order in which cardinality changes is explicit with each chained &lt;code&gt;|&amp;gt; WHERE&lt;/code&gt; or &lt;code&gt;|&amp;gt; AGGREGATE&lt;/code&gt;. The changes in cardinality are thus sequential and can be more easily reasoned about.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Easier multi-level aggregation&lt;/h3&gt;&lt;p&gt;In Standard SQL, each level of aggregation needs a new CTE (or god forbid a nested subquery). In Pipe syntax, each additional level of aggregation is just another chain of &lt;code&gt;|&amp;gt; AGGREGATE … GROUP BY …&lt;/code&gt; clause.&lt;/p&gt;&lt;p&gt;The appearance of &lt;code&gt;AGGREGATE&lt;/code&gt; also gives immediate notice to the reader that the following logic is focused on aggregation. In Standard SQL, one would have to:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Read through a large list of dimensions until an aggregation function appears without an &lt;code&gt;OVER&lt;/code&gt; clause, or&lt;/li&gt;&lt;li&gt;Scroll to the end of the CTE and check for a &lt;code&gt;GROUP BY&lt;/code&gt; clause.&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Standard SQL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
date_OnD &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;OCanonical&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;DCanonical&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;function_call type&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;type_builtin&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;OCanonical&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;DCanonical&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  
  &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;metric1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;function_call type&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;metric2&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  
  &lt;span class=&quot;function_call type&quot;&gt;ARRAY_AGG&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;function_call type&quot;&gt;STRUCT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;OCanonical&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;DCanonical&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;metric1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;metric2&lt;/span&gt;
  &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;string float number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;Examples&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;date_OnD&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;Date&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; AGGREGATE
    COUNT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    SUM&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    &lt;span class=&quot;type_builtin&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; OCanonical&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; DCanonical
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; AGGREGATE
    SUM&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;metric1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    SUM&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;metric2&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    
    ARRAY_AGG&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;STRUCT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      OCanonical&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      DCanonical&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      metric1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      metric2
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LIMIT&lt;/span&gt; 10&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; Examples
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    &lt;span class=&quot;type_builtin&quot;&gt;Date&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Easier EXCEPT and REPLACE&lt;/h3&gt;&lt;p&gt;The equivalent of &lt;code&gt;SELECT * EXCEPT ()&lt;/code&gt; and &lt;code&gt;SELECT * REPLACE ()&lt;/code&gt; are now &lt;code&gt;|&amp;gt; DROP&lt;/code&gt; and &lt;code&gt;|&amp;gt; SET&lt;/code&gt;, respectively. Some niceties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Trailing commas makes it easy to toggle comments on these lines when developing code,&lt;/li&gt;&lt;li&gt;The syntax for &lt;code&gt;SET&lt;/code&gt; makes it very obvious which column is being replaced. This is in contrast to the &lt;code&gt;REPLACE&lt;/code&gt; syntax, which requires the dev to tediouscly scan for the corresponding &lt;code&gt;AS&lt;/code&gt; keyword for each column.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Standard SQL&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
  &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;EXCEPT&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
    drop_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    drop_2
  &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
    UDF1&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; col_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    STRUCT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;type_builtin&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;type_builtin&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      col_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;Uid &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; Aqid
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; col_2
  &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt;
    drop_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    drop_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;col_1&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; UDF1&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    col_2 &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; STRUCT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
        DATE&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;type_builtin&quot;&gt;Timestamp&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;type_builtin&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
        col_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;Uid &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; Aqid
      &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Easier to manage sequential changes in column definitions&lt;/h3&gt;&lt;p&gt;Following on the discussion of &lt;code&gt;REPLACE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; above, there’s a common pattern where data needs to be processed one column at a time. The brevity of the code speaks for itself.&lt;/p&gt;&lt;h4&gt;Standard SQL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
raw &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;col_1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;col_2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;col_3&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

new_col1 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;function_call type&quot;&gt;UDF1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;col_1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;col_1&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
  FROM raw
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

new_col2 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;function_call type&quot;&gt;UDF2&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;col_1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;col_2&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;col_2&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- depends on new col_1&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
  FROM new_col2
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

new_col3 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;function_call type&quot;&gt;UDF3&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;field&quot;&gt;col_2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;field&quot;&gt;col_3&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;col_3&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- depends on new col_2&lt;/span&gt;
    &lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
  FROM new_col2
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;new_col3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;col_1&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; UDF1&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;col_2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; UDF2&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; col_2&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- depends on new col_1&lt;/span&gt;
|&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt;
    &lt;span class=&quot;type&quot;&gt;col_3&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; UDF3&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;col_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; col_3&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- depends on new col_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Cleaner Aggregation&lt;/h3&gt;&lt;p&gt;In Standard SQL, dimensions and metrics can be in arbitrary order in the &lt;code&gt;SELECT&lt;/code&gt; statement and the column names need to be manually duplicated in the &lt;code&gt;GROUP BY&lt;/code&gt; statement if not using &lt;code&gt;GROUP BY 1, 2 ...&lt;/code&gt; or &lt;code&gt;GROUP BY ALL&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;When developing code, this becomes time consuming when:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;a column name needs to be renamed in both the &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;GROUP&lt;/code&gt; BY clauses,&lt;/li&gt;&lt;li&gt;a column needs to be added/removed from &lt;code&gt;GROUP BY&lt;/code&gt; when a dimension becomes a metric or vice-versa,&lt;/li&gt;&lt;li&gt;debugging a column that should have been aggregated but wasn’t due to using &lt;code&gt;GROUP BY ALL&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In Pipe syntax, the separation of metrics and dimensions is demarcated by the &lt;code&gt;GROUP BY&lt;/code&gt; keywords. Renaming of grouping columns becomes trivial.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Note 1: Pipe syntax allows a trailing comma for the final column in &lt;code&gt;GROUP BY&lt;/code&gt; which makes it easy to reorder grouping columns.&lt;/li&gt;&lt;li&gt;Note 2: Pipe syntax doesn’t allow &lt;code&gt;GROUP BY ALL&lt;/code&gt;. This may sound like an inconvenience as more lines of code might be needed, but there’s no actual change since the code is just being moved from &lt;code&gt;SELECT&lt;/code&gt; to &lt;code&gt;GROUP BY&lt;/code&gt;. There’s also the added benefit of the code being more explicit about what’s being grouped.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Standard SQL&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
group_by_column_example &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;dim_1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;dim2&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dim_2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

    &lt;span class=&quot;function_call type&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
    dim_1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;dim_2&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

group_by_all_example &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;dim1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;function_call type&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string float number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;metric1&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;field&quot;&gt;metric2&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- Forgot to aggregate this metric&lt;/span&gt;
  &lt;span class=&quot;field&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Pipe Syntax&lt;/h4&gt;&lt;pre&gt;&lt;code class=&quot;sql&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WITH&lt;/span&gt;
group_by_column_example &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  FROM datset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; AGGREGATE
      COUNT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
      dim1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      dim2 &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; dim_2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- Column alias + trailing comma. Awesome!&lt;/span&gt;
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;

group_by_all_example &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;
  FROM dataset&lt;span class=&quot;punctuation_delimiter&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;table&lt;/span&gt;
  |&lt;span class=&quot;operator&quot;&gt;&amp;gt;&lt;/span&gt; AGGREGATE
      COUNT&lt;span class=&quot;punctuation_bracket&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; metric1&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt;
      metric2&lt;span class=&quot;punctuation_delimiter&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;comment spell&quot;&gt;-- BQ Engine will remind you to aggregate this&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;keyword_operator&quot;&gt;BY&lt;/span&gt;
      dim1
&lt;span class=&quot;punctuation_bracket&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Closing thoughts&lt;/h1&gt;&lt;p&gt;I think Google Pipe syntax greatly improves the ergonomics of reading and writing SQL. Good developer ergonomics = faster development and/or more robust systems. I believe there’s a lot of potential for other SQl dialects to adopt pipe syntax, and I look forward to the day where it becomes ubiquitous.&lt;/p&gt;&lt;/div&gt;</description>
        <link>https://www.fullstackdata.dev/blog/1-BQPipe/</link>
        <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/1-BQPipe/</guid>
      </item>
    
  </channel>
</rss>
