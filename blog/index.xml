<rss version="2.0">
  <channel>
    <title>The Full Stack Data Dev</title>
    <link>https://www.fullstackdata.dev</link>
    <description>The Full Stack Data Dev - Blog</description>
    <generator>Zine -- https://zine-ssg.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 23 May 2025 13:48:05 +0000</lastBuildDate>
    
      <item>
        <title>Powerful dbt tests using BigQuery Pipe Syntax</title>
        <description></description>
        <link>https://www.fullstackdata.dev/blog/3-BQPipe-dbt/</link>
        <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/3-BQPipe-dbt/</guid>
      </item>
    
      <item>
        <title>Data quality testing in dbt</title>
        <description></description>
        <link>https://www.fullstackdata.dev/blog/2-dbt-testing/</link>
        <pubDate>Sat, 24 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/2-dbt-testing/</guid>
      </item>
    
      <item>
        <title>BigQuery Pipe Syntax: Cleaner SQL</title>
        <description>&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;This document is intended to highlight the benefits of BigQuery’s Pipe syntax SQL and convince users for adoption. If you’re not familiar with Pipe syntax, you may consider starting from a &lt;a href=&quot;#comparison&quot;&gt;later section&lt;/a&gt; to see some simple code side-by-side with Google standard SQL.&lt;/p&gt;&lt;p&gt;No contrived examples, just pure real-world use cases.&lt;/p&gt;&lt;p&gt;Here are some more comprehensive resources if you find the examples here insufficient:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Official &lt;a href=&quot;https://cloud.google.com/bigquery/docs/reference/standard-sql/pipe-syntax&quot; target=&quot;_blank&quot;&gt;documentation&lt;/a&gt; for Pipe syntax:&lt;/li&gt;&lt;li&gt;Conference paper introducing Pipe syntax: &lt;a href=&quot;https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/&quot; target=&quot;_blank&quot;&gt;https://research.google/pubs/sql-has-problems-we-can-fix-them-pipe-syntax-in-sql/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;If I had to summarise the benefits of Pipe syntax SQL in a few bullet points, it would be:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Improved guarantees on table cardinality&lt;/li&gt;&lt;li&gt;Stronger integration with templating languages (i.e. Jinja in dbt)&lt;/li&gt;&lt;li&gt;Improved readability from:&lt;ul&gt;&lt;li&gt;Fewer CTEs that are more deliberately named&lt;/li&gt;&lt;li&gt;Concise multi-level aggregation&lt;/li&gt;&lt;li&gt;Concise sequential transforms&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Improved debugging experience in BigQuery console&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Game-changer improvements&lt;/h2&gt;&lt;p&gt;Easier to transform arrays of structs&lt;/p&gt;&lt;p&gt;Consider a table with an array of structs as follows.&lt;/p&gt;&lt;p&gt;Sample table&lt;/p&gt;&lt;p&gt;– 1 row = 1 patient with an array of historical weight/height measurements WITH existing_logic AS ( SELECT 1 AS patient_id, [ STRUCT(70 AS weight, 1.75 AS height), – weight:kg, height:m STRUCT(71 AS weight, 1.75 AS height) ] AS history UNION ALL SELECT 2 AS patient_id, [ STRUCT(64 AS weight, 1.65 AS height) ] AS history )&lt;/p&gt;&lt;p&gt;SELECT * FROM existing_logic&lt;/p&gt;&lt;p&gt;Suppose we are now tasked to augment the history array by adding (BMI = weight / height^2) for each historical record. E.g. final table should appear as follows.&lt;/p&gt;&lt;p&gt;Target state of table&lt;/p&gt;&lt;p&gt;There are many ways to achieve this in standard SQL, but we can broadly categorise them into 2 approaches:&lt;/p&gt;&lt;p&gt;Manipulate the arrays in place using a subquery&lt;/p&gt;&lt;p&gt;Unnest the arrays in top-level CTEs, perform the transform, and re-aggregate.&lt;/p&gt;&lt;p&gt;Let’s look at some example implementations using standard SQL.&lt;/p&gt;&lt;p&gt;Standard SQL (Approach 1)&lt;/p&gt;&lt;p&gt;Standard SQL (Approach 2)&lt;/p&gt;&lt;p&gt;WITH existing_logic AS ( – Existing transformations in model ), bmi AS ( SELECT * REPLACE ( ARRAY((                        – This is the start of the subquery SELECT AS STRUCT *, weight/POWER(height, 2) AS BMI, FROM UNNEST(history) )) AS history                  – This is the end of the subquery ) FROM existing_logic ), more_logic AS ( – Further transformations in model )&lt;/p&gt;&lt;p&gt;WITH existing_logic AS ( – Existing transformations in model ), bmi_unnest AS ( SELECT existing_logic.* REPLACE(h AS history), OFFSET FROM existing_logic, UNNEST(history) AS h WITH OFFSET ), bmi_compute AS ( SELECT * REPLACE( (SELECT AS STRUCT history.*, history.weight / POWER(history.height, 2) AS BMI ) AS history ) FROM bmi_unnest ), bmi_reagg AS ( SELECT * EXCEPT(OFFSET, history), ARRAY_AGG(history ORDER BY OFFSET) AS history FROM bmi_compute GROUP BY ALL               – Have fun debugging a SELECT * GROUP BY ALL ), more_logic AS ( – Further transformations in model )&lt;/p&gt;&lt;p&gt;Despite the first approach appearing shorter, it is typically considered more difficult to read since the reader needs to identify the start and end of subqueries among existing CTEs. This difficulty is greatly exacerbated by any logic that is more involved than a simple example computation and requires CTEs for sequential transformations.&lt;/p&gt;&lt;p&gt;The second approach is easier to read since all the CTEs are top-level and the reader doesn’t need to identify the start and end of nested subqueries. However, this improved readability comes at a cost:&lt;/p&gt;&lt;p&gt;Unnesting the array &amp; re-aggregating destroys guarantees on the table cardinality. This makes the table more fragile to future code changes. Testing the table can help, but it’s difficult to provide any guarantees on table cardinality assuming it’s possible to test for this in the first place.&lt;/p&gt;&lt;p&gt;The re-aggregation can be done either by a SELECT * GROUP BY ALL for brevity (but difficult to debug), or by tediously listing all the grouping column.&lt;/p&gt;&lt;p&gt;Namespace pollution in top-level CTEs.&lt;/p&gt;&lt;p&gt;Consider now the Pipe Syntax variant.&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH existing_logic AS ( – Existing transformations in model ), bmi AS ( FROM existing_logic |&gt; SET history = ARRAY(( FROM UNNEST(history) |&gt; EXTEND weight/POWER(height, 2) AS BMI |&gt; SELECT AS STRUCT * )) ), more_logic AS ( – Further transformations in model )&lt;/p&gt;&lt;p&gt;Let’s see how it addresses some of the concerns from the standard SQL variants:&lt;/p&gt;&lt;p&gt;Subqueries Pipe syntax introduces one nested subquery per array. Furthermore, complex transformations can just be chained before the final |&gt; SELECT AS STRUCT * instead of using nested CTEs.&lt;/p&gt;&lt;p&gt;Table cardinality The cardinality of the top-level table is untouched.&lt;/p&gt;&lt;p&gt;Namespace pollution A single CTE can be used to encapsulate as many or as few transformations as deemed appropriate.&lt;/p&gt;&lt;p&gt;More powerful generic tests in dbt&lt;/p&gt;&lt;p&gt;See section below: &lt;a href=&quot;https://rome2rio.atlassian.net/wiki/spaces/TIPS/pages/3511648257/BQ+Pipe+Syntax+SQL#metric_conserved&quot; target=&quot;_blank&quot;&gt;https://rome2rio.atlassian.net/wiki/spaces/TIPS/pages/3511648257/BQ+Pipe+Syntax+SQL#metric_conserved&lt;/a&gt;&lt;/p&gt;&lt;div id=&quot;comparison&quot;&gt;&lt;h2&gt;&lt;a class=&quot;&quot; href=&quot;#comparison&quot;&gt;Small conveniences&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Easier to identify references to previous CTEs&lt;/p&gt;&lt;p&gt;Consider the following example where cte3 references cte1.&lt;/p&gt;&lt;p&gt;In Standard SQL, the declaration cte3 AS can be many lines apart from the reference FROM cte1 if the SELECT list is long.&lt;/p&gt;&lt;p&gt;In Pipe syntax, the reference to cte1 is always within a few lines of cte3 AS.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH cte1 AS ( SELECT … FROM dataset.table ),&lt;/p&gt;&lt;p&gt;cte2 AS ( SELECT … FROM dataset.table2 ),&lt;/p&gt;&lt;p&gt;cte3 AS ( SELECT … FROM cte1 – this can be screens apart from cte3 )&lt;/p&gt;&lt;p&gt;SELECT … FROM cte3 JOIN cte2 USING(…)&lt;/p&gt;&lt;p&gt;WITH cte1 AS ( FROM dataset.table |&gt; SELECT … ),&lt;/p&gt;&lt;p&gt;cte2 AS ( FROM dataset.table2 |&gt; SELECT … ),&lt;/p&gt;&lt;p&gt;cte3 AS ( FROM cte1 – this appears immediatley below cte3 |&gt; SELECT … )&lt;/p&gt;&lt;p&gt;FROM cte3 |&gt; JOIN cte2 USING(…) |&gt; SELECT …&lt;/p&gt;&lt;p&gt;Easier to identify changes in table cardinality (row-count)&lt;/p&gt;&lt;p&gt;Consider the following example where the table undergoes several transformations, each of which affect the final row count. In Standard SQL, the cardinality of the table changes 4 times due to the clauses UNNEST, WHERE, GROUP BY, and HAVING.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;SELECT dim_1, dim_2, COUNTIF(some_criteria) AS metric_1, ARRAY_AGG(some_expression) AS metric_2, FROM dataset.table, UNNEST(array) AS a WHERE some_filter GROUP BY dim_1, dim_2 HAVING metric_1 &gt; 0&lt;/p&gt;&lt;p&gt;FROM dataset.table, UNNEST(arr) AS a |&gt; WHERE some_filter |&gt; AGGREGATE COUNTIF(some_criteria) AS metric_1, ARRAY_AGG(some_expression) AS metric_2, GROUP BY dim_1, dim_2, |&gt; WHERE metric_1 &gt; 0&lt;/p&gt;&lt;p&gt;Some pain points in Standard SQL and how Pipe syntax helps:&lt;/p&gt;&lt;p&gt;If the SELECT list is very long, the dev has to scroll down quite far from the beginning of the CTE to find out how the cardinality has changed. In Pipe syntax, the dev immediately expects a change in cardinality upon coming across one of UNNEST, |&gt; WHERE and |&gt; AGGREGATE. For UNNEST, the team can choose to adopt the style of using |&gt; CROSS JOIN UNNEST to denote an explicit change in cardinality.&lt;/p&gt;&lt;p&gt;Additional mental headspace is needed to determine the order in which the table cardinality changes due to each of the 4 clauses (note that QUALIFY also affects cardinality). In Pipe syntax, the order in which cardinality changes is explicit with each chained |&gt;. The changes in cardinality are thus sequential and can be more easily reasoned about.&lt;/p&gt;&lt;p&gt;Easier multi-level aggregation&lt;/p&gt;&lt;p&gt;In Standard SQL, each level of aggregation needs a new CTE (or god forbid a nested subquery). In Pipe syntax, each additional level of aggregation is just another chain of |&gt; AGGREGATE … GROUP BY … clause.&lt;/p&gt;&lt;p&gt;The appearance of AGGREGATE also gives immediate notice to the reader that the following logic is focused on aggregation. In Standard SQL, one would have to 1) read through a large list of dimensions until an aggregation function appears without an OVER clause or 2) scroll down to check for a GROUP BY clause.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH date_OnD AS ( SELECT Date, OCanonical, DCanonical,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;COUNT(1) AS metric1,
SUM(value) AS metric2,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FROM dataset.table GROUP BY Date, OCanonical, DCanonical )&lt;/p&gt;&lt;p&gt;SELECT Date,&lt;/p&gt;&lt;p&gt;SUM(metric1) AS metric1, SUM(metric2) AS metric2,&lt;/p&gt;&lt;p&gt;ARRAY_AGG(STRUCT( OCanonical, DCanonical, metric1, metric2 ) LIMIT 10) AS Examples FROM date_OnD GROUP BY Date&lt;/p&gt;&lt;p&gt;FROM dataset.table |&gt; AGGREGATE COUNT(1) AS metric1, SUM(value) AS metric2, GROUP BY Date, OCanonical, DCanonical |&gt; AGGREGATE SUM(metric1) AS metric1, SUM(metric2) AS metric2,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ARRAY_AGG(STRUCT(
  OCanonical,
  DCanonical,
  metric1,
  metric2
) LIMIT 10) AS Examples
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GROUP BY Date&lt;/p&gt;&lt;p&gt;Easier EXCEPT and REPLACE&lt;/p&gt;&lt;p&gt;The equivalent of SELECT * EXCEPT () and SELECT * REPLACE () are now |&gt; DROP and |&gt; SET, respectively. Some niceties:&lt;/p&gt;&lt;p&gt;Trailing commas makes it easy to toggle comments on these lines when developing code,&lt;/p&gt;&lt;p&gt;The syntax for SET makes it very obvious which column is being replaced, as opposed to the REPLACE syntax which requires the dev to scan for the correct AS keyword (this can be extremely tedious when the column being replaced has struct fields being renamed).&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;SELECT&lt;/p&gt;&lt;ul&gt;&lt;li&gt;EXCEPT ( drop_1, drop_2 ) REPLACE( UDF1(col_1) AS col_1, STRUCT( DATE(col_2.Timestamp) AS Date, col_2.Uid AS Aqid ) AS col_2 ) FROM dataset.table&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;FROM dataset.table |&gt; DROP drop_1, drop_2, – trailing comma! |&gt; SET col_1 = UDF1(col_1), col_2 = STRUCT( DATE(col_2.Timestamp) AS Date, col_2.Uid AS Aqid ), – trailing comma!&lt;/p&gt;&lt;p&gt;Easier to manage sequential changes in column definitions&lt;/p&gt;&lt;p&gt;Following on the discussion of REPLACE and SET above, there’s a common pattern where data needs to be processed one column at a time (e.g. deviceCategory needs to be cleaned before it can be used to determine R2rFrontEnd).&lt;/p&gt;&lt;p&gt;The brevity of the code speaks for itself.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH raw AS ( SELECT col_1, col_2, col_3, FROM dataset.table ),&lt;/p&gt;&lt;p&gt;new_col1 AS ( SELECT * REPLACE ( UDF1(col_1) AS col_1 ) FROM raw ),&lt;/p&gt;&lt;p&gt;new_col2 AS ( SELECT * REPLACE ( UDF2(col_1, col_2) AS col_2 – depends on new col_1 ) FROM new_col2 ),&lt;/p&gt;&lt;p&gt;new_col3 AS ( SELECT * REPLACE ( UDF3(col_2, col_3) AS col_3 – depends on new col_2 ) FROM new_col2 )&lt;/p&gt;&lt;p&gt;SELECT * FROM new_col3&lt;/p&gt;&lt;p&gt;FROM dataset.table |&gt; SET col_1 = UDF1(col_1) |&gt; SET col_2 = UDF2(col_1, col_2) – depends on new col_1 |&gt; SET col_3 = UDF3(col_2, col_3) – depends on new col_2&lt;/p&gt;&lt;p&gt;Cleaner Aggregation&lt;/p&gt;&lt;p&gt;In Standard SQL, dimensions and metrics can be in arbitrary order in the SELECT statement and the column names need to be manually duplicated in the GROUP BY statement if not using GROUP BY 1, 2 … or GROUP BY ALL.&lt;/p&gt;&lt;p&gt;When developing code, this becomes time consuming when:&lt;/p&gt;&lt;p&gt;a column name needs to be renamed in both the SELECT and GROUP BY clauses,&lt;/p&gt;&lt;p&gt;a column needs to be added/removed from GROUP BY when a dimension becomes a metric or vice-versa,&lt;/p&gt;&lt;p&gt;debugging a column that should have been aggregated but wasn’t due to using GROUP BY ALL.&lt;/p&gt;&lt;p&gt;In Pipe syntax, the separation of metrics and dimensions is demarcated by the GROUP BY keywords. Renaming of grouping columns becomes trivial.&lt;/p&gt;&lt;p&gt;Note 1: Pipe syntax allows a trailing comma for the final column in GROUP BY which makes it easy to reorder grouping columns.&lt;/p&gt;&lt;p&gt;Note 2: Pipe syntax doesn’t allow GROUP BY ALL. This may sound like an inconvenience as more lines of code might be needed, but there’s no actual change since the code is just being moved from SELECT to GROUP BY. There’s also the added benefit of the code being more explicit about what’s being grouped.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH group_by_column_example AS ( SELECT dim_1, dim2 AS dim_2,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;COUNT(1) AS metric,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FROM dataset.table GROUP BY dim_1, dim_2 ),&lt;/p&gt;&lt;p&gt;group_by_all_example AS ( SELECT dim1,&lt;/p&gt;&lt;pre&gt;&lt;code&gt;COUNT(1) AS metric1,
metric2, -- Forgot to aggregate this metric
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;FROM dataset.table GROUP BY ALL )&lt;/p&gt;&lt;p&gt;WITH group_by_column_example AS ( FROM datset.table |&gt; AGGREGATE COUNT(1) AS metric, GROUP BY dim1, dim2 AS dim_2, – Column alias + trailing comma. Awesome! ),&lt;/p&gt;&lt;p&gt;group_by_all_example AS ( FROM dataset.table |&gt; AGGREGATE COUNT(1) AS metric1, metric2, – BQ Engine will remind you to aggregate this GROUP BY dim1 )&lt;/p&gt;&lt;p&gt;Common patterns&lt;/p&gt;&lt;p&gt;UNION ALL and EXCEPT DISTINCT&lt;/p&gt;&lt;p&gt;FROM table1_v1 |&gt; UNION ALL (FROM table1_v2), (FROM table1_v3), |&gt; EXCEPT DISTINCT (FROM table1_obsolete)&lt;/p&gt;&lt;p&gt;Selecting the schema columns at the end&lt;/p&gt;&lt;p&gt;A common pattern in our current codebase is to have our first CTE extract the columns we need, and then have all the subsequent CTEs add/drop columns as needed while processing business logic, making liberal use of the patterns * EXCEPT and * REPLACE.&lt;/p&gt;&lt;p&gt;One consequence of this is that table schemas have columns being ordered in non-intuitive ways (i.e. in whatever order columns were added in CTEs). This adds complexity when tables are obsoleted by new implementations and there needs to be a union of datasets to match schemas (e.g. &lt;a href=&quot;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/productMetrics/productMetrics-Sessions.sql&quot; target=&quot;_blank&quot;&gt;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/productMetrics/productMetrics-Sessions.sql&lt;/a&gt;, &lt;a href=&quot;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/monitoring/monitoring-UserExits.sql&quot; target=&quot;_blank&quot;&gt;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/monitoring/monitoring-UserExits.sql&lt;/a&gt;, &lt;a href=&quot;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/bookings/bookings-LegacyUserBookings.sql&quot; target=&quot;_blank&quot;&gt;https://github.com/rome2rio/cloudlake-dbt/blob/e82cf897ab8c341c8f3a64f85dc911e657019666/models/bookings/bookings-LegacyUserBookings.sql&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;With Pipe syntax, most business logic can be processed in pipes |&gt; instead of in CTEs. This isolates the concern of having to reorder new columns and drop old columns to match schemas while processing other logic. The concern of column orders to match schemas can be containerised into the final |&gt; SELECT pipe.&lt;/p&gt;&lt;p&gt;Standard SQL&lt;/p&gt;&lt;p&gt;Pipe Syntax&lt;/p&gt;&lt;p&gt;WITH new AS ( SELECT * FROM dataset.table ),&lt;/p&gt;&lt;p&gt;business_logic AS ( SELECT * EXCEPT (new_col) REPLACE ( CAST(UDF(old_col) AS DATETIME) AS old_col ), FROM new&lt;br&gt;),&lt;/p&gt;&lt;p&gt;reorder_columns AS ( SELECT * EXCEPT(old_col), old_col, – make sure old_col appears last FROM business_logic ),&lt;/p&gt;&lt;p&gt;legacy AS ( SELECT * FROM dataset.table_legacy )&lt;/p&gt;&lt;p&gt;SELECT * FROM legacy UNION ALL SELECT * FROM reorder_columns&lt;/p&gt;&lt;p&gt;{%- set legacy_schema %} col_1, col_2, … {%- enset}&lt;/p&gt;&lt;p&gt;WITH new AS ( FROM dataset.table |&gt; DROP new_col |&gt; SET old_col = CAST(UDF(old_col) AS DATETIME) |&gt; SELECT {{ legacy_schema }} ),&lt;/p&gt;&lt;p&gt;legacy AS ( FROM dataset.table_legacy |&gt; SELECT {{ legacy_schema }} )&lt;/p&gt;&lt;p&gt;FROM legacy |&gt; UNION ALL (FROM new)&lt;/p&gt;&lt;/div&gt;</description>
        <link>https://www.fullstackdata.dev/blog/1-BQPipe/</link>
        <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
        <guid>https://www.fullstackdata.dev/blog/1-BQPipe/</guid>
      </item>
    
  </channel>
</rss>
